/*
Двумерные массивы (матрицы)

Двумерный массив имеет два измерения. Работа с матрицей, как и работа с одномерным массивом, 
начинается с создания ссылки на матрицу с последующим выделением памяти. Также возможна инициализация элементов матрицы. 
Пусть требуется создать матрицу действительных чисел A[2x3]. 
Рассмотрим варианты работы.

1)Создание ссылки на матрицу и выделение памяти:

double [,]a = new double[2, 3];

2)Создаём ссылку на матрицу, выделяем память и одновременно инициализируем элементы матрицы:

double [,]a = new double[2, 3]{{2,4,0},{1,6,4}};

Как видим, каждую строку берём в свой блок, в остальном всё делается так же, как и для одномерного массива.
То же самое можно записать по аналогии с одномерным массивом ещё проще:

double [,]a = new double[,]{{2,4,0},{1,6,4}};

Пример. Пронормировать матрицу действительных чисел A[2x3], 
т.е. каждый элемент матрицы поделить на максимальное по модулю число.
Возможный вариант решения:
*/
using System;
namespace Prim_Matr1
{
   class Program
   {
      public static void Main(string[] args)
      {
         const int n = 2;
         const int m = 3;
         double [,]a = new double[n, m];
         int i, j;

         Console.WriteLine("Задайте матрицу A[{0}*{1}]:", n , m);
         for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
               a[i, j] = double.Parse(Console.ReadLine());

         double max = Math.Abs(a[0, 0]);
         for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
               if(Math.Abs(a[i, j]) > max)
                  max = Math.Abs(a[i, j]);
         Console.WriteLine("max = {0}", max);

         for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
               a[i, j] /= max;

         Console.WriteLine("Mатрица A[{0}*{1}] после нормирования:", n , m);
         for(i = 0; i < n; i++)
         {
            for(j = 0; j < m; j++)
               Console.Write(a[i,j]+"\t ");
            Console.WriteLine();
         }
         Console.Write("Press any key to continue . . . ");
         Console.ReadKey(true);
      }
   }
}

